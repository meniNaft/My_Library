@model My_Library.Views.Books.ViewModels.CreateViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Book</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="form-id" asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="@Model.Book.Name" class="control-label"></label>
                <input asp-for="@Model.Book.Name" class="form-control" />
                <span asp-validation-for="@Model.Book.Name" class="text-danger"></span>
            </div>
            <div class="form-group">  
                <label asp-for="@Model.Book.Width" class="control-label"></label>
                <input id="width-input" asp-for="@Model.Book.Width" class="form-control" />
                <span asp-validation-for="@Model.Book.Width" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Book.Height" class="control-label"></label>
                <input id="height-input" asp-for="@Model.Book.Height" class="form-control" />
                <span asp-validation-for="@Model.Book.Height" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Book.Genre" class="control-label"></label>
                <select id="genre-select" asp-for="@Model.Book.Genre" class="form-control" asp-items="ViewBag.genreId">
                    <option selected value="">בחר ז'אנר</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Book.ShelfId" class="control-label"></label>
                <select id="shelf-select" asp-for="@Model.Book.ShelfId" class="form-control">
                    <option value="">לא נבחר מדף</option>
                    @foreach (var s in Model.Shelves)
                    {
                        <option data-genre="@s.Library.Genre.Id" data-height="@s.Height" data-emptyplace="@s.EmptyPlace" disabled="@(s.EmptyPlace <= 0)" value="@s.Id">
                            @s.Name (מקום פנוי - @s.EmptyPlace, גובה - @s.Height)
                        </option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Book.SetId" class="control-label"></label>
                <select id="set-select" asp-for="@Model.Book.SetId" class="form-control">
                    <option value="">ללא סט</option>
                    @foreach (var s in Model.Sets)
                    {
                        <option data-genre="@s.GenreId" data-shelfid="@s.ShelfId" value="@s.Id">
                            @s.Name
                        </option>
                    }
                </select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<input type="hidden" id="errorMessage" value="@Model.ErrorModel?.Message" />

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @await Html.PartialAsync("Components/ErrorModal")
    @await Html.PartialAsync("Components/heightConfirmModal")

}

<script>
    $(document).ready(function () {
        var isConfirmed = false;
        $('#form-id').on('submit', function (event) {
            if (!isConfirmed) {
                event.preventDefault();
                if ($(this).valid()) { 
                    var bookHeight = parseFloat($('#height-input').val());
                    var maxHeight = parseFloat($('#height-input').attr('max'));

                    if (maxHeight - bookHeight > 10) {
                        $('#heightConfirmModal').modal('show');
                    } else {
                        isConfirmed = true; 
                        $(this).submit();
                    }
                }
            }
        });
        $('#confirmHeightSubmit').click(function () {
            isConfirmed = true;
            $('#heightConfirmModal').modal('hide'); 
            $('#form-id').submit();
        });


        var errorMessage = $('#errorMessage').val();
        if (errorMessage) {
            $('#shelf-select').prop('disabled', true);
            $('#message').text(errorMessage);
            $('#errorModal').modal('show');
        }
        
        function setMaxDimensions() {
            var selectedOption = $('#shelf-select option:selected');
            var emptyPlace = selectedOption.data('emptyplace');
            var height = selectedOption.data('height');

            if (emptyPlace !== undefined) {
                $('#width-input').attr('max', emptyPlace);
                $('#height-input').attr('max', height);
            } else {
                $('#width-input').removeAttr('max');
                $('#height-input').removeAttr('max');
            }
        }

        function GenreSelected(){
            var selected = $('#genre-select').val();
            if (!selected) {
                $('#shelf-select').prop('disabled', true);
                $('#shelf-select').val("");
                $('#set-select').prop('disabled', true);
                $('#set-select').val("");
            }
            else {
                $('#shelf-select').prop('disabled', false);
                $('#set-select').prop('disabled', false);
                let isExistShelf = false;
                $('#shelf-select option').each(function () {
                    if ($(this).data('genre') == selected && $(this).data('emptyplace') > 0) {
                        $(this).prop('disabled', false);
                        isExistShelf = true;
                    } else {
                        $(this).prop('disabled', true);
                        $('#shelf-select').val("");
                    }
                });
                $('#set-select option').each(function () {
                    if ($(this).data('genre') == selected || $(this).val() == '') {
                        $(this).prop('disabled', false);
                    } else {
                        $(this).prop('disabled', true);
                        $('#set-select').val("");
                    }
                });

                if (!isExistShelf) {
                    $('#message').text("אין מדפים פנויים עבור ז'אנר זה, יש ליצור קודם מדף חדש");
                    $('#errorModal').modal('show');
                }
            }
        }
        $('#genre-select').change(function () {
            GenreSelected();
            setMaxDimensions();

        });

        $('#shelf-select').change(function () {
            setMaxDimensions();
        });

        function setSelected() {
            var selected = $('#set-select').val();
            if (selected) {
                var SetShelfId = $('#set-select option:selected').data('shelfid');
                if (SetShelfId != 0){
                    $('#shelf-select option').each(function () {
                        if ($(this).val() == SetShelfId) {
                            if ($(this).data('emptyplace') > 0) {
                                $(this).prop('disabled', false);
                                $('#shelf-select').val($(this).val());
                            } else {
                                $(this).prop('disabled', true);
                                $('#message').text('אין מקום להוספת הספר במדף זה. יש להסיר ספרים שאינם שייכים לסט מהמדף או להעביר את כל הסט למדף אחר');
                                $('#errorModal').modal('show');
                                $('#shelf-select').val('');
                            }
                        }
                        else {
                            $(this).prop('disabled', true);
                        }
                    });
                }
            }
            else {
                GenreSelected();
            }
        }
        $('#set-select').change(function () {
            setSelected();
            setMaxDimensions();
        });
        GenreSelected();
        setMaxDimensions();
    });
</script>
